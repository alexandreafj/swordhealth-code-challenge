version: '3.5'

services:
  redis:
    image: "redis:latest"
    container_name: redis
    ports: 
      - 6379:6379
    networks:
        - rabbitmq_nodejs
  mysql:
   image: mysql
   restart: always
   container_name: mysql-task
   ports:
    - 3306:3306
   environment:
     MYSQL_ROOT_PASSWORD: root
   volumes:
    - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
   networks:
    - rabbitmq_nodejs
  backend-swordhealth-proxy:
    build:
      context: ./backend-swordhealth
      dockerfile: Dockerfile-proxy.dev
    container_name: backend-swordhealth-proxy
    ports:
      - 8080:8080
    depends_on:
      - backend-swordhealth
    links:
      - backend-swordhealth
    networks:
      - rabbitmq_nodejs
  backend-swordhealth:
    build:
      context: ./backend-swordhealth
      dockerfile: Dockerfile.dev
    container_name: backend-swordhealth
    working_dir: /backend-swordhealth
    volumes:
      - backend-swordhealth-node-modules:/backend-swordhealth/node_modules
      - ./backend-swordhealth:/backend-swordhealth
    depends_on: 
      - redis
      - mysql
      - rabbitmq
      - notification-consumer
    environment:
      PORT: 8089
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MYSQL_HOST: mysql
      MYSQL_USER: sword
      MYSQL_PASS: sword
      MYSQL_DATABASE: maintenance_tasks
      NODE_ENV: development
      JWT_PRIVATE_KEY: backend-challenge-sword
      JWT_EXPIRES_IN: 1 day
      JWT_ISS: swordhealth
      JWT_AUD: localhost
      AMQP_QUEUE: manager.taks_perfomed
      AMQP_URL: amqp://guest:guest@rabbitmq:5672
    links:
      - redis:redis
    ports:
      - 9229:9229
    networks:
      - rabbitmq_nodejs
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5673:5672
        - 15673:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - rabbitmq_nodejs
  notification-consumer:
    build:
      context: ./notification-consumer
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification-consumer:/notification-consumer
    depends_on:
      - "rabbitmq"
    command: sh -c '/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 -- node consumer.js'
    environment:
      NODE_ENV: development
      AMQP_QUEUE: manager.taks_perfomed
      AMQP_URL: amqp://guest:guest@rabbitmq:5672
    networks:
      - rabbitmq_nodejs
networks:
  rabbitmq_nodejs:
    driver: bridge
volumes:
  backend-swordhealth-node-modules:
  notification-manager-node-modules: