map $http_origin $origin_allowed {
   default 0;
   ~^.*\:\/\/localhost\:\d\d\d\d$ 1;
}
map $origin_allowed $access_control_allow_origin {
   0 '';
   1  $http_origin;
}
map $origin_allowed $access_control_allow_credentials {
   0 'false';
   1 'true';
}
map $origin_allowed $access_control_allow_methods {
   0 'OPTIONS';
   1 'GET, POST, DELETE, OPTIONS, PUT';
}
map $origin_allowed $access_control_allow_headers {
   0 '';
   1 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With';
}

upstream nodejs {
  # prd/stg
  # server localhost:8089;
  # dev
  server backend-swordhealth:8089;
  keepalive 240;
}

server {
  listen 8080 default_server;
  etag on;
  server_tokens off;
  charset utf-8;
  default_type application/json;
  real_ip_header X-Forwarded-For;
  set_real_ip_from 10.0.0.0/16;
  client_max_body_size 5M;
  access_log off;
  proxy_read_timeout 2000;

  location ^~ /api/v1/health {
    return 200;
  }

  location ^~ /api/v1/docs {
    # security, docs only be accessed by trust ips
    expires 2d;

    proxy_pass http://nodejs;
  }

  location ^~ /api/v1/ {
    add_header Cache-Control "private";
    add_header 'x-origin-allowed' $origin_allowed;
    add_header 'Access-Control-Allow-Origin' "$access_control_allow_origin" always;
    add_header 'Access-Control-Allow-Credentials' "$access_control_allow_credentials" always;
    add_header 'Access-Control-Allow-Methods' "$access_control_allow_methods" always;
    add_header 'Access-Control-Allow-Headers' "$access_control_allow_headers" always;

    if ($request_method = OPTIONS ) {
        expires 1d;
        return 204;
    }

    if ($request_method = GET ) {
      expires 5s; ## allow browser to use same response for 5 seconds
    }

    proxy_hide_header 'Access-Control-Allow-Origin';
    proxy_hide_header 'Access-Control-Allow-Credentials';
    proxy_hide_header 'Access-Control-Allow-Methods';
    proxy_hide_header 'Access-Control-Allow-Headers';
    proxy_hide_header 'X-Powered-By';
    proxy_set_header Host $http_host;
    proxy_pass http://nodejs;
  }

}